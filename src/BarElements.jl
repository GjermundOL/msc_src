using Muscade
using StaticArrays
using LinearAlgebra
using GLMakie


const ùï£ = Float64

# vector projection
#vec_proj(vec::Vector{<:Number}, proj_vec::Vector{<:Number}) = dot(vec,proj_vec)/dot(proj_vec, proj_vec)*proj_vec

####

#n√•r jeg tilf√∏rer element, kaller den funksjonen BarElement
struct BarElement <:AbstractElement
    length:: ùï£
    axial_stiffness:: ùï£ # youngs*areal/lengde
    weight:: ùï£
    V‚Çö :: Vector{ùï£} 
    coords :: Vector{Vector{Float64}}
end


function BarElement(nod::Vector{Node}; y_mod::ùï£, cs_area::ùï£, g::ùï£, mass::ùï£)
    coords = coord(nod)
    V‚Çö = coords[2]-coords[1]
    length = sqrt(LinearAlgebra.dot(V‚Çö, V‚Çö))
    axial_stiffness = y_mod*cs_area/length
    weight = g*mass*cs_area*length
    return BarElement(length, axial_stiffness, weight, V‚Çö, coords)
end



Muscade.doflist(::Type{<:BarElement})=(inod=(1,1,2,2),class=ntuple(i->:X,4), field=(:tx1,:tx2,:tx1,:tx2))

@espy function Muscade.residual(o::BarElement, X,U,A,t,SP,dbg)

    X‚ÇÄ  = ‚àÇ0(X)
    #println("delta_X: ", X‚ÇÄ)
    #println("Coords: ", o.coords)
    #println("delta_X type:", typeof(X‚ÇÄ))


    coord‚ÇÅ = o.coords[1] + [X‚ÇÄ[1], X‚ÇÄ[2]]  # Coordinates of n·µ¢ 
    coord‚ÇÇ = o.coords[2] + [X‚ÇÄ[3], X‚ÇÄ[4]]  # Coordinates of n‚±º 

    V‚Çö·µó = coord‚ÇÇ - coord‚ÇÅ   # Vector from n·µ¢ to n‚±º 
    L·µó = norm(V‚Çö·µó)    # Length of element
    ŒîL = L·µó - o.length      # Difference in length compared to original length
    ‚òºŒ¥L = ŒîL/o.length        # Length change ratio
    ‚òºF‚Çê = o.axial_stiffness * Œ¥L   # Axial forces
    u‚Çö·µó = V‚Çö·µó / L·µó          # Unit vector parallel to V‚Çö·µó

    F·µ• = F‚Çê * u‚Çö·µó   # Force vector acting on node‚ÇÇ. Force vector acting on node‚ÇÅ is -F·µ•.

    ‚òºF = SVector(-F·µ•[1], o.weight/2 - F·µ•[2], F·µ•[1], o.weight/2 + F·µ•[2])


    return F, noFB
end

function Muscade.draw(::Type{<:BarElement}, axe,o, Œõ,X,U,A, t,SP,dbg;kwargs...)

    X‚ÇÄ = ‚àÇ0(X) # Matrise, X‚ÇÄ[idof, iel]
    
    xs = []
    ys = []

    for j = 1:length(X‚ÇÄ[1,:])
        
        Œîx‚ÇÅ = X‚ÇÄ[1, j]
        Œîy‚ÇÅ = X‚ÇÄ[2, j]
        Œîx‚ÇÇ = X‚ÇÄ[3, j]
        Œîy‚ÇÇ = X‚ÇÄ[4, j]

        Œîn‚ÇÅ = [Œîx‚ÇÅ, Œîy‚ÇÅ]
        Œîn‚ÇÇ = [Œîx‚ÇÇ, Œîy‚ÇÇ]

        n‚ÇÅ, n‚ÇÇ = o[j].coords[1] + Œîn‚ÇÅ, o[j].coords[2] + Œîn‚ÇÇ
        
        append!(xs, [n‚ÇÅ[1], n‚ÇÇ[1]])
        append!(ys, [n‚ÇÅ[2], n‚ÇÇ[2]])
        if j != length(X‚ÇÄ[1,:])
            append!(xs, [NaN])
            append!(ys, [NaN])
        end
        
        #println("j = ", j, ", xs: ", xs)
        #println("j = ", j, ", ys: ", ys)

    end
    
    lines!(axe, xs, ys ;kwargs...)
end

Muscade.draw(::Type{<:AbstractElement}, axe,o, Œõ,X,U,A, t,SP,dbg;kwargs...) = nothing


#@show methods(Muscade.residual)


###### TEST  AV RESIDUAL ##############################################################
#=
elmnt = BarElement([model.nod[n1], model.nod[n2]])

node‚ÇÅ = model.nod[elmnt.nodID[1]]   # Node element n1
node‚ÇÇ = model.nod[elmnt.nodID[2]]   # Node element n2

coord‚ÇÅ = node‚ÇÅ.coord -[0.00001,0.00001]   # Coordinates of n1
coord‚ÇÇ = node‚ÇÇ.coord +[0.00001,0.00001]   # Coordinates of n2

V‚Çö·µó = coord‚ÇÇ - coord‚ÇÅ   # Vector from n1 to n2
L·µó = sqrt(dot(V‚Çö·µó, V‚Çö·µó))    # Length of element
ŒîL = L·µó - elmnt.length      # Difference in length compared to original length
F‚Çê = elmnt.axial_stiffness * ŒîL     # Axial forces
u‚Çö·µó = V‚Çö·µó / L·µó          # Unit vector parallel to V‚Çö·µó

F·µ• = F‚Çê * u‚Çö·µó   # Force vector acting on node‚ÇÇ. Force vector acting on node‚ÇÅ is -F·µ•.

F = SVector(-F·µ•[1], elmnt.weight/2 - F·µ•[2], F·µ•[1], elmnt.weight/2 + F·µ•[2])
=#
########################################################################################################
