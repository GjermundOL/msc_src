using Muscade
using StaticArrays
using LinearAlgebra
using GLMakie


const ùï£ = Float64


struct BarElement <:AbstractElement
    L:: ùï£   # Length
    Œ∫:: ùï£   # Axial stiffness
    F·µÇ:: ùï£  # Weight
    V‚Çö :: Vector{ùï£} # Vector from n‚ÇÅ to n‚ÇÇ 
    coords :: Vector{Vector{ùï£}}
end


function BarElement(nod::Vector{Node}; E::ùï£, A·∂úÀ¢::ùï£, g::ùï£, density::ùï£)
    coords = coord(nod)
    V‚Çö = coords[2]-coords[1]
    L = sqrt(LinearAlgebra.dot(V‚Çö, V‚Çö))
    Œ∫ = E*A·∂úÀ¢
    F·µÇ = g*density*A·∂úÀ¢*L
    return BarElement(L, Œ∫, F·µÇ, V‚Çö, coords)
end



Muscade.doflist(::Type{<:BarElement})=(inod=(1,1,2,2),class=ntuple(i->:X,4), field=(:tx1,:tx2,:tx1,:tx2))

@espy function Muscade.residual(o::BarElement, X,U,A,t,SP,dbg)

    X‚ÇÄ  = ‚àÇ0(X)

    coord‚ÇÅ = o.coords[1] + [X‚ÇÄ[1], X‚ÇÄ[2]]  # Coordinates of n·µ¢ 
    coord‚ÇÇ = o.coords[2] + [X‚ÇÄ[3], X‚ÇÄ[4]]  # Coordinates of n‚±º 

    V‚Çö·µó = coord‚ÇÇ - coord‚ÇÅ   # Vector from n·µ¢ to n‚±º 
    L·µó = norm(V‚Çö·µó)    # Length of element
    ŒîL = L·µó - o.L      # Difference in length compared to original length
    ‚òºS = ŒîL/o.L        # Length change ratio
    ‚òºF‚Çê = o.Œ∫ * S   # Axial forces
    u‚Çö·µó = V‚Çö·µó / L·µó          # Unit vector parallel to V‚Çö·µó

    F·µ• = F‚Çê * u‚Çö·µó   # Force vector acting on node‚ÇÇ. Force vector acting on node‚ÇÅ is -F·µ•.

    ‚òºF = SVector(-F·µ•[1], o.F·µÇ/2 - F·µ•[2], F·µ•[1], o.F·µÇ/2 + F·µ•[2])

    return F, noFB
end

function Muscade.draw(::Type{<:BarElement}, axe,o, Œõ,X,U,A, t,SP,dbg;kwargs...)

    X‚ÇÄ = ‚àÇ0(X) # Matrix, X‚ÇÄ[idof, iel]
    
    xs = []
    ys = []

    for j = 1:length(X‚ÇÄ[1,:])
        
        Œîx‚ÇÅ = X‚ÇÄ[1, j]
        Œîy‚ÇÅ = X‚ÇÄ[2, j]
        Œîx‚ÇÇ = X‚ÇÄ[3, j]
        Œîy‚ÇÇ = X‚ÇÄ[4, j]

        Œîn‚ÇÅ = [Œîx‚ÇÅ, Œîy‚ÇÅ]
        Œîn‚ÇÇ = [Œîx‚ÇÇ, Œîy‚ÇÇ]

        n‚ÇÅ, n‚ÇÇ = o[j].coords[1] + Œîn‚ÇÅ, o[j].coords[2] + Œîn‚ÇÇ
        
        append!(xs, [n‚ÇÅ[1], n‚ÇÇ[1]])
        append!(ys, [n‚ÇÅ[2], n‚ÇÇ[2]])
        if j != length(X‚ÇÄ[1,:])
            append!(xs, [NaN])
            append!(ys, [NaN])
        end
        
    end
    
    lines!(axe, xs, ys ;kwargs...)
end

Muscade.draw(::Type{<:AbstractElement}, axe,o, Œõ,X,U,A, t,SP,dbg;kwargs...) = nothing