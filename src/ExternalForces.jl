using Muscade
using StaticArrays
using LinearAlgebra

const ùï£ = Float64

function GenerateExFs(nNodes::Integer, ex_type::String, ex_scale::ùï£)
    
    F·µÅ_dir = rand(-1:0.001:1,2) # Direction of F·µÅ

    F·µÅ_dir_unit = F·µÅ_dir/norm(F·µÅ_dir) # Unit vector of F·µÅ
    
    F·µÅ = Array{ùï£}(undef, 0)

    if ex_type == "random"

        dev = ex_scale*0.3 # Deviation
        
        for i = 1:nNodes-2
            Œ∏ = rand(-2*pi/8 : pi/1000 : 2*pi/8)
            rot_mat = Matrix{ùï£}(undef, 2, 2)
            rot_mat[1,1], rot_mat[1,2], rot_mat[2,1], rot_mat[2,2] = cos(Œ∏), -sin(Œ∏), sin(Œ∏), cos(Œ∏)
            
            F·µÅ·µ¢ = rand(ex_scale - dev: dev/100 : ex_scale + dev) * rot_mat*F·µÅ_dir_unit
            
            append!(F·µÅ, [F·µÅ·µ¢[1], F·µÅ·µ¢[2]])
        end
    end
    
    if ex_type == "test"

        F·µÅ_dir = [0.5, 0.5] # Direction of F·µÅ

        F·µÅ_dir_unit = F·µÅ_dir/norm(F·µÅ_dir) # Unit vector of F·µÅ
        
        F·µÅ·µ¢ = ex_scale*F·µÅ_dir_unit
        
        for i = 1:nNodes-2
            append!(F·µÅ, [F·µÅ·µ¢[1], F·µÅ·µ¢[2]])
        end
    end

    return F·µÅ

end


function ApplyExFs(model::Model, nNodes::Integer, V‚Çô::Vector{Muscade.NodID}, F·µÅ::Vector{ùï£})
    V‚Çë = []

    for i = 3:nNodes

        e·µ¢À£ = addelement!(model, DofLoad, [V‚Çô[i]];field=:tx1,value=t->F·µÅ[2*i-5])
        e·µ¢ ∏ = addelement!(model, DofLoad, [V‚Çô[i]];field=:tx2,value=t->F·µÅ[2*i-4])

        append!(V‚Çë, [e·µ¢À£, e·µ¢ ∏])
    end
    
    return V‚Çë
end