using Muscade
using StaticArrays
using LinearAlgebra
using MasterTask
using GLMakie

const ùï£ = Float64

function ForwardAnalysis(cs_area, E, mass, g, nNodes, tWidth, nHeight, ex_type, ex_scale; displayTower=false, saveTower=false)


    model           = Model(:TestModel) 

    #println("BuildTower")

    V‚Çô, V‚Çë = BuildTower(model, nNodes, tWidth, nHeight, E, cs_area, g, mass)
    #println("GenerateExFs")

    F·µÅ = GenerateExFs(nNodes, ex_type, ex_scale) # Endre tittel

    #println("ApplyExFs")
    V‚Çë·µÅ  = ApplyExFs(model, nNodes, V‚Çô, F·µÅ)

    #println("initialize!")
    initialstate    = initialize!(model) # Initializes model


    #println("solve")
    state           = solve(SweepX{0};initialstate,time=[0.,1.])

    #println("getdof")
    #tx1,_           = getdof(state,field=:tx1,nodID=[V‚Çô[3]]) # Returns: dofresidual, dofID


    t = 2
    #println("ExtractMeasurements")
    Œ¥L·µ• = ExtractMeasurements(state, V‚Çë,t)

    V‚Çë‚Çì = V‚Çë[5:length(V‚Çë)]
    #println("Typeof(forward state): ", typeof(state))
    #println("forward state[1]: ", state[1])
    ## GLMakie ##
    #println("Draw")

    #println("F·µÅ: ", F·µÅ)
    DrawTower(state[1], "Forward analysis"; displayTower = displayTower, saveTower = saveTower)

    return state, Œ¥L·µ•, V‚Çë‚Çì, F·µÅ, V‚Çë·µÅ
end 