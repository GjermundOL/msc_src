using Muscade
using StaticArrays
using LinearAlgebra
using MasterTask
using GLMakie

const ùï£ = Float64

function InverseAnalysis(cs_area, E, mass, g, nNodes, tWidth, nHeight, S·µê, V‚Çë‚Çò, Œ≤, ex_scale, folder_name, folder_path, œï; displayTower=false, saveTower=false, drawForces = false)
    
    model           = Model(:TestModel) 
    V‚Çô, V‚Çë, V·µ§ = BuildInverseTower(model, nNodes, S·µê, V‚Çë‚Çò, Œ≤, tWidth, nHeight, E, cs_area, g, mass)

    initialstate    = initialize!(model)

    stateXUA           = solve(DirectXUA{0,0,0};initialstate,time=0:1.:7, maxiter = 100, verbose = false)

    S‚Å± = ExtractMeasurements(stateXUA, V‚Çë,1)
    
    F·¥±·µ¢‚Çô·µ•·∂∏·µóÀ£¬π = getdof(stateXUA[1];class=:U,field=:utx1)
    F·¥±·µ¢‚Çô·µ•·∂∏·µóÀ£¬≤ = getdof(stateXUA[1];class=:U,field=:utx2)
    F·¥±·µ¢‚Çô·µ• = collect(Iterators.flatten(zip(F·¥±·µ¢‚Çô·µ•·∂∏·µóÀ£¬π, F·¥±·µ¢‚Çô·µ•·∂∏·µóÀ£¬≤)))

    if displayTower || saveTower
        if drawForces
            DrawTower(stateXUA[2], "Inverse analysis", folder_name, folder_path, œï; displayTower = displayTower, saveTower = saveTower, externalForces = F·¥±·µ¢‚Çô·µ•, externalElements = V·µ§, ex_scale = ex_scale)
        else
            DrawTower(stateXUA[2], "Inverse analysis", folder_name, folder_path, œï; displayTower = displayTower, saveTower = saveTower)
        end
    end
    return stateXUA, S‚Å±, F·¥±·µ¢‚Çô·µ• 
end